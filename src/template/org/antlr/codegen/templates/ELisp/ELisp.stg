/*
 [The "BSD licence"]
 Copyright (c) 2005-2006 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
group ELisp implements ANTLRCore;

elispTypeInitMap ::= [
	default:"nil"
]

/** The overall file structure of a recognizer; stores methods for rules
 *  and cyclic DFAs plus support code.
 */
outputFile(LEXER,PARSER,TREE_PARSER, actionScope, actions,
           docComment, recognizer,
           name, tokens, tokenNames, rules, cyclicDFAs,
	   bitsets, buildTemplate, buildAST, rewrite, profile,
	   backtracking, synpreds, memoize, numRules,
	   fileName, ANTLRVersion, generatedTimestamp, trace,
	   scopes, superClass, literals) ::=
<<
;;;; $ANTLR <ANTLRVersion> <fileName> <generatedTimestamp>
<actions.(actionScope).header>

<@imports>
(require 'a3el-runtime)

<@end>

<docComment>
<recognizer>
>>

lexer(grammar, name, tokens, scopes, rules, numRules, labelType="Token",
      filterMode) ::= <<
(a3el-deflexer <name>)

(with-lexer <name>
  <tokens:{(a3el-deftoken <it.name> <it.type>)}; separator="\n">
  <scopes:{<if(it.isDynamicGlobalScope)><globalAttributeScope(scope=it)><endif>}>
  <actions.lexer.members>

<if(filterMode)>
  <filteringNextToken()>
<endif>
  <rules; separator="\n\n">

  <synpreds:{p | <lexerSynpred(p)>}>

  <cyclicDFAs:cyclicDFA()> <! dump tables for all DFA !>
  <cyclicDFAs:{dfa | (a3el-setDFA dfa<dfa.decisionNumber> (make-a3el-DFAstruct-DFA<dfa.decisionNumber>))}; separator="\n">
)
>>

filteringNextToken() ::= <<
;; FIXME(nextToken)

;; FIXME(memoize)

;; FIXME(alreadyParsedRule)
>>

filteringActionGate() ::= ";; FIXME(filteringActionGate)"

/** How to generate a parser */
genericParser(grammar, name, scopes, tokens, tokenNames, rules, numRules,
              bitsets, inputStreamType, superClass,
              ASTLabelType="Object", labelType, members) ::= <<
(a3el-defparser <name>)

(with-parser <name>
    (a3el-parser-token-names "\<invalid>" "\<EOR>" "\<DOWN>" "\<UP>" <tokenNames; separator=" ">)

    <tokens:{(a3el-deftoken <it.name> <it.type>)}; separator="\n">

    <scopes:{<if(it.isDynamicGlobalScope)><globalAttributeScope(scope=it)><endif>}>

    <bitsets:bitset(name={FOLLOW_<it.name>_in_<it.inName><it.tokenIndex>},
                    words64=it.bits)>

    <@members>
    (a3el-parser-initialization
<if(backtracking)>
      (setf (a3el-parser-rule-memo current-parser) (make-vector (+ <numRules> 1) nil))
<endif>
      )
    <@end>

    <members>

    <rules; separator="\n\n">

    <synpreds:{p | <synpred(p)>}>

    <cyclicDFAs:{dfa | ;; FIXME(DFA:sAgain) <dfa.decisionNumber>}; separator="\n">
    <cyclicDFAs:cyclicDFA()> <! dump tables for all DFA !>

)
>>

parser(grammar, name, scopes, tokens, tokenNames, rules, numRules, bitsets, ASTLabelType, superClass="Parser", labelType="Token", members={<actions.parser.members>}) ::= <<
<genericParser(inputStreamType="TokenStream", ...)>
>>

/** How to generate a tree parser; same as parser except the input
 *  stream is a different type.
 */
treeParser(grammar, name, scopes, tokens, tokenNames, globalAction, rules, numRules, bitsets, labelType={<ASTLabelType>}, ASTLabelType="Object", superClass="TreeParser", members={<actions.treeparser.members>}) ::= <<
<genericParser(inputStreamType="TreeNodeStream", ...)>
>>

/** A simpler version of a rule template that is specific to the imaginary
 *  rules created for syntactic predicates.  As they never have return values
 *  nor parameters etc..., just give simplest possible method.  Don't do
 *  any of the normal memoization stuff in here either; it's a waste.
 *  As predicates cannot be inlined into the invoking rule, they need to
 *  be in a rule by themselves.
 */
synpredRule(ruleName, ruleDescriptor, block, description, nakedBlock) ::=
<<
;; $ANTLR start <ruleName>
(a3el-defrule <ruleName>_fragment (<ruleDescriptor.parameterScope:parameterScope(scope=it)>)
  <if(trace)>(trace-in "<ruleName>_fragment" <ruleDescriptor.index>)<endif>
  (catch 'return
  (unwind-protect
    (progn 
        <block>
	nil
	)
    <if(trace)>(trace-out "<ruleName>_fragment" <ruleDescriptor.index>)<endif>
    )))
;; $ANTLR end <ruleName>
>>

synpred(name) ::= << >>
lexerSynpred(name) ::= <<>>


ruleMemoization(name) ::= <<
<if(memoize)>
;; FIXME(ruleMemo)
<endif>
>>

/** How to test for failure and return from rule */
checkRuleBacktrackFailure() ::= <<
<if(backtracking)>
	<if(LEXER)>
	(if (a3el-lexer-context-failed context) 
	(throw 'rule-return (or <ruleReturnValue()>)))

	<else>

	(if (a3el-parser-context-failed context)
	(throw 'rule-return (or <ruleReturnValue()>)))
	<endif>
<endif>
>>

/** This rule has failed, exit indicating failure during backtrack */
ruleBacktrackFailure() ::= <<
<if(backtracking)>
	<if(LEXER)>
	(if (> (a3el-lexer-context-backtracking context) 0)
	(progn
	(setf (a3el-lexer-context-failed context) t)
	(throw 'rule-return (or <ruleReturnValue()>))))

	<else>

	(if (> (a3el-parser-context-backtracking context) 0)
	(progn
	(setf (a3el-parser-context-failed context) t)
	(throw 'rule-return (or <ruleReturnValue()>))))
	<endif>
<endif>
>>


/** How to generate code for a rule.  This includes any return type
 *  data aggregates required for multiple return values.
 */
rule(ruleName,ruleDescriptor,block,emptyRule,description,exceptions,finally,memoize) ::= <<
<ruleAttributeScope(scope=ruleDescriptor.ruleScope)>
<returnScope(scope=ruleDescriptor.returnScope)>


<ruleAttributeScope(scope=ruleDescriptor.ruleScope)>
<returnScope(scope=ruleDescriptor.returnScope)>



;; $ANTLR start <ruleName>
;; <fileName>:<description>
(a3el-defrule <ruleName> (<ruleDescriptor.parameterScope:parameterScope(scope=it)>)
  <if(trace)>(trace-in "<ruleName>" <ruleDescriptor.index>)<endif>
  <ruleScopeSetUp()>
  <ruleDeclarations()>
  <ruleLabelDefs()>
  <ruleDescriptor.actions.init>
  <@preamble()>
  (catch 'rule-return
  (unwind-protect
    (progn 
      (condition-case re
        (progn
        <ruleMemoization(name=ruleName)>
        <block>
        <ruleCleanUp()>
        <(ruleDescriptor.actions.after):execAction()>
	nil
       )
<if(exceptions)>
    <exceptions:{e|<catch(decl=e.decl,action=e.action)><\n>}>))
<else>
<if(!emptyRule)>
<if(actions.(actionScope).rulecatch)>
    <actions.(actionScope).rulecatch>
<else>
    (a3el-re-error 
    <if(LEXER)>
      (a3el-lexer-report-error re)<\n>
      (a3el-lexer-recover re)<\n>
    <else>
      (a3el-parser-report-error re)<\n>
      (a3el-parser-recover re)<\n>
    <endif>
    ))
<endif>
<endif>
<endif>)
    <if(trace)>(trace-out "<ruleName>" <ruleDescriptor.index>)<endif>
    <memoize()>
    <ruleScopeCleanUp()>
    <finally>)
    <@postamble()>
    <ruleReturnValue()>
)
)
;; $ANTLR end <ruleName>
>>

catch(decl,action) ::= <<
;; FIXME(catch)
>>

ruleDeclarations() ::= <<
>>

ruleScopeSetUp() ::= <<
<ruleDescriptor.useScopes:{;; FIXME(rule_scope_setup1)}; separator="\n">
<ruleDescriptor.ruleScope:{;; FIXME(rule_scope_setup2)}; separator="\n">
>>

ruleScopeCleanUp() ::= <<
<ruleDescriptor.useScopes:{;; FIXME(rule_scope_cleanup1)}; separator="\n">
<ruleDescriptor.ruleScope:{;; FIXME(rule_scope_cleanup2)}; separator="\n">
>>

ruleLabelDefs() ::= <<
<[ruleDescriptor.tokenLabels,ruleDescriptor.tokenListLabels]
    :{;; FIXME(rule_label_defs)}; separator="\n"
>
<[ruleDescriptor.tokenListLabels,ruleDescriptor.ruleListLabels]
    :{;; FIXME(rule_label_defs2)}; separator="\n"
>
<ruleDescriptor.ruleLabels:ruleLabelDef(label=it); separator="\n">
<ruleDescriptor.ruleListLabels:{ll|;; FIXME(rule_label_defs3)}; separator="\n">
>>
/*CUTOFF*/
lexerRuleLabelDefs() ::= <<
<[ruleDescriptor.tokenLabels,
  ruleDescriptor.tokenListLabels,
  ruleDescriptor.ruleLabels]
    :{<labelType> <it.label.text>=null;}; separator="\n"
>
<ruleDescriptor.charLabels:{int <it.label.text>;}; separator="\n">
<[ruleDescriptor.tokenListLabels,
  ruleDescriptor.ruleListLabels,
  ruleDescriptor.ruleListLabels]
    :{List list_<it.label.text>=null;}; separator="\n"
>
>>

ruleReturnValue() ::= <<
<if(!ruleDescriptor.isSynPred)>
<if(ruleDescriptor.hasReturnValue)>
<if(ruleDescriptor.hasSingleReturnValue)>
<ruleDescriptor.singleValueReturnName>
<else>
retval
<endif>
<endif>
<endif>
>>

ruleCleanUp() ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
<if(!TREE_PARSER)>
retval.stop = input.LT(-1);<\n>
<endif>
<endif>
>>

memoize() ::= <<
<if(memoize)>
<if(backtracking)>
(if (> (a3el-parser-context-backtracking context) 0)
  (memoize input <ruleDescriptor.index> <ruleDescriptor.name>_StartIndex))
<endif>
<endif>
>>

/** How to generate a rule in the lexer; naked blocks are used for
 *  fragment rules.
 */
lexerRule(ruleName,nakedBlock,ruleDescriptor,block,memoize) ::= <<
(a3el-defrule <ruleName> (<ruleDescriptor.parameterScope:parameterScope(scope=it)>)
  <if(trace)>(trace-in "<ruleName>" <ruleDescriptor.index>)<endif>
  <ruleScopeSetUp()>
  <ruleDeclarations()>
  (catch 'rule-return
  (unwind-protect 
    (progn
<if(nakedBlock)>
  <ruleMemoization(name=ruleName)>
  <lexerRuleLabelDefs()>
  <ruleDescriptor.actions.init>
  <block><\n>
<else>
  (let ((_type (a3el-lexer-token-id <ruleName>)))
    <ruleMemoization(name=ruleName)>
    <lexerRuleLabelDefs()>
    <ruleDescriptor.actions.init>
    <block>
    <ruleCleanUp()>
    (a3el-lexer-set-type _type)
    <(ruleDescriptor.actions.after):execAction()>
  )
<endif>
  )
  (progn
    <if(trace)>(trace-in "<ruleName>" <ruleDescriptor.index>)<endif>
    <ruleScopeCleanUp()>
    <memoize()>
  )
 ))
) ;; END rule <ruleName>
>>

/** How to generate code for the implicitly-defined lexer grammar rule
 *  that chooses between lexer rules.
 */
tokensRule(ruleName,nakedBlock,args,block,ruleDescriptor) ::= <<
(a3el-defrule Tokens ()
  <block><\n>
)
>>

// S U B R U L E S

/** A (...) subrule with multiple alternatives */
block(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
;; <fileName>:<description>
(let ((alt<decisionNumber> <maxAlt>))
  <decls>
  <@predecision()>
  <decision>
  <@postdecision()>
  <@prebranch()>
  (a3el-alt-case alt<decisionNumber>
    <alts:altSwitchCase()>)
  <@postbranch()>)
>>

/** A rule block with multiple alternatives */
ruleBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
;; <fileName>:<description>
(let ((alt<decisionNumber> <maxAlt>))
  <decls>
  <@predecision()>
  <decision>
  <@postdecision()>
  (a3el-alt-case alt<decisionNumber>
    <alts:altSwitchCase()>))
>>

ruleBlockSingleAlt(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,description) ::= <<
;; <fileName>:<description>
<decls>
<@prealt()>
<alts>
<@postalt()>
>>

/** A special case of a (...) subrule with a single alternative */
blockSingleAlt(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,description) ::= <<
;; <fileName>:<description>
<decls>
<@prealt()>
<alts>
<@postalt()>
>>

/** A (..)+ block with 1 or more alternatives */
positiveClosureBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
;; <fileName>:<description>
(let ((cnt<decisionNumber> 0))
  <decls>
  <@preloop()>
  (catch 'loop<decisionNumber>
    (while t
      (let ((alt<decisionNumber> <maxAlt>))
        <@predecision()>
        <decision>
        <@postdecision()>
        (a3el-alt-case alt<decisionNumber>
          <alts:altSwitchCase()>
          (otherwise
            (if (>= cnt<decisionNumber> 1)
              (throw 'loop<decisionNumber> nil))
            <ruleBacktrackFailure()>
            (signal 'a3el-early-exit (list <decisionNumber>))))
        (incf cnt<decisionNumber>))
    ))
<@postloop()>)
>>

positiveClosureBlockSingleAlt ::= positiveClosureBlock

/** A (..)* block with 1 or more alternatives */
closureBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
;; <fileName>:<description>
<decls>
<@preloop()>
(catch 'loop<decisionNumber>
  (while t
    (let ((alt<decisionNumber> <maxAlt>))
      <@predecision()>
      <decision>
      <@postdecision()>
      (a3el-alt-case alt<decisionNumber>
        <alts:altSwitchCase()>
        (otherwise
          (throw 'loop<decisionNumber> nil)))))
  <@postloop()>)
>>

closureBlockSingleAlt ::= closureBlock

/** Optional blocks (x)? are translated to (x|) by before code generation
 *  so we can just use the normal block template
 */
optionalBlock ::= block

optionalBlockSingleAlt ::= block

/** A case in a switch that jumps to an alternative given the alternative
 *  number.  A DFA predicts the alternative and then a simple switch
 *  does the jump to the code that actually matches that alternative.
 */
altSwitchCase() ::= <<
(<i>
    <@prealt()>
    <it>
    )<\n>
>>

/** An alternative is just a list of elements; at outermost level */
alt(elements,altNum,description,autoAST,outerAlt) ::= <<
;; <fileName>:<description>
<@declarations()>
<elements:element()>
<@cleanup()>
>>

// E L E M E N T S

/** Dump the elements one per line */
element() ::= <<
<@prematch()>
<it.el><\n>
>>

/** match a token optionally with a label in front */
tokenRef(token,label,elementIndex) ::= <<
<if(label)>
(setq <label> (a3el-parser-input-LT 1))<\n>
<endif>
(a3el-parser-match <token> FOLLOW_<token>_in_<ruleName><elementIndex>)
<checkRuleBacktrackFailure()>
>>

/** ids+=ID */
tokenRefAndListLabel(token,label,elementIndex) ::= <<
<tokenRef(...)>
<listLabel(elem=label,...)>
>>

listLabel(label,elem) ::= <<
(setq list_<label> (cons <elem> list_<label>))<\n>
>>

/** match a character */
charRef(char,label) ::= <<
<if(label)>
(setq <label> (lookahead input 1))<\n>
<endif>
(a3el-lexer-match <char>) <checkRuleBacktrackFailure()>
>>


/** match a character range */
charRangeRef(a,b,label) ::= <<
<if(label)>
<if(LEXER)>
(setq <label> (a3el-lexer-input-LA 1))<\n>
<else>
(setq <label> (a3el-parser-input-LA 1))<\n>
<endif>
<endif>
(a3el-lexer-match-range <a> <b>) <checkRuleBacktrackFailure()>
>>

/** For now, sets are interval tests and must be tested inline */
matchSet(s,label,elementIndex,postmatchCode="") ::= <<
<if(label)>
<if(LEXER)>
(setq <label> (a3el-lexer-input-LA 1))<\n>
<else>
(setq <label> (a3el-parser-input-LT 1))<\n>
<endif>
<endif>
(if <s>
  (progn

    <if(LEXER)>
    (a3el-lexer-input-consume)
    <else>
    (a3el-parser-input-consume)
    <endif>

    <postmatchCode>

    <if(!LEXER)>
    (setf (a3el-parser-context-error-recovery context) nil)
    <endif>

    <if(!LEXER)>
    <if(backtracking)>
    (setf (a3el-parser-context-failed context) nil)
    <endif>    
    <endif>
    )
    (progn

    <ruleBacktrackFailure()>
    <@mismatchedSetException()>

    <if(LEXER)>
    (a3el-lexer-recover '(mismatched-set nil))
    <else>
    (a3el-parser-recover-from-mismatched-token-no-type 'mismatched-set FOLLOW_set_in_<ruleName><elementIndex>);
    <endif>

    (signal 'mismatched-set nil))<\n>
)
>>

matchSetAndListLabel(s,label,elementIndex,postmatchCode) ::= <<
<matchSet(...)>
<listLabel(elem=label,...)>
>>

/** Match a string literal */
lexerStringRef(string,label) ::= <<
<if(label)>
int <label>Start = getCharIndex();
match(<string>); <checkRuleBacktrackFailure()>
<labelType> <label> = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, <label>Start, getCharIndex()-1);
<else>
(a3el-lexer-match <string>) <checkRuleBacktrackFailure()><\n>
<endif>
>>

wildcard(label,elementIndex) ::= <<
<if(label)>
  <if(LEXER)> 
    (setq <label> (a3el-lexer-input-LT 1))<\n>
  <else>
    (setq <label> (a3el-parser-input-LT 1))<\n>
  <endif>      
<endif>

<if(LEXER)> 
  (a3el-lexer-match-any)
<else>
  (a3el-parser-match-any)
<endif>     
<checkRuleBacktrackFailure()>

>>

wildcardAndListLabel(label,elementIndex) ::= <<
<wildcard(...)>
<listLabel(elem=label,...)>
>>

/** Match . wildcard in lexer */
wildcardChar(label, elementIndex) ::= <<
<if(label)>
  (setq <label> (a3el-lexer-input-LA 1))<\n>
<endif>
(a3el-lexer-match-any)
<checkRuleBacktrackFailure()>
>>

wildcardCharListLabel(label, elementIndex) ::= <<
<wildcardChar(...)>
<listLabel(elem=label,...)>
>>

/** Match a rule reference by invoking it possibly with arguments
 *  and a return value or values.
 */
ruleRef(rule,label,elementIndex,args) ::= <<
(a3el-parser-push-follow FOLLOW_<rule>_in_<ruleName><elementIndex>)
<if(label)>
(setq <label> (a3el-parser-call-rule <rule> <args; separator=" ">))<\n>
<else>
(a3el-parser-call-rule <rule> <args; separator=" ">)<\n>
<endif>
(decf (a3el-parser-context-fsp context))
<checkRuleBacktrackFailure()><\n>
>>

/** ids+=r */
ruleRefAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRef(...)>
<listLabel(elem=label,...)>
>>

/** A lexer rule reference */
lexerRuleRef(rule,label,args,elementIndex) ::= <<
<if(label)>
int <label>Start<elementIndex> = getCharIndex();
(a3el-lexer-call-rule <rule> <args; separator=" ">) <checkRuleBacktrackFailure()>
<label> = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, <label>Start<elementIndex>, getCharIndex()-1);
<else>
(a3el-lexer-call-rule <rule> <args; separator=" ">) <checkRuleBacktrackFailure()>
<endif>
>>

/** i+=INT in lexer */
lexerRuleRefAndListLabel(rule,label,args,elementIndex) ::= <<
<lexerRuleRef(...)>
<listLabel(elem=label,...)>
>>

/** EOF in the lexer */
lexerMatchEOF(label,elementIndex) ::= <<
<if(label)>
int <label>Start<elementIndex> = getCharIndex();
(a3el-lexer-match EOF) <checkRuleBacktrackFailure()>
<labelType> <label> = new CommonToken(input, EOF, Token.DEFAULT_CHANNEL, <label>Start<elementIndex>, getCharIndex()-1);
<else>
(a3el-lexer-match EOF) <checkRuleBacktrackFailure()>
<endif>
>>

/** match ^(root children) in tree parser */
tree(root, actionsAfterRoot, children, nullableChildList) ::= <<
<root:element()>
<actionsAfterRoot:element()>
<if(nullableChildList)>
(when (equal (a3el-parser-input-LA 1) *a3el-token-down*)
    match(input, Token.DOWN, null); <checkRuleBacktrackFailure()>
    <children:element()>
    match(input, Token.UP, null); <checkRuleBacktrackFailure()>)
<else>
match(input, Token.DOWN, null); <checkRuleBacktrackFailure()>
<children:element()>
match(input, Token.UP, null); <checkRuleBacktrackFailure()>
<endif>
>>

/** Every predicate is used as a validating predicate (even when it is
 *  also hoisted into a prediction expression).
 */
validateSemanticPredicate(pred,description) ::= <<
(when (not <evalPredicate(...)>)
    <ruleBacktrackFailure()>
    throw new FailedPredicateException(input, "<ruleName>", "<description>");)
>>

// F i x e d  D F A  (if-then-else)

dfaState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
(let ((LA<decisionNumber>_<stateNumber> (<if(LEXER)>a3el-lexer-input-LA<else>a3el-parser-input-LA<endif> <k>)))<\n>
<edges; separator="\n   ">
(progn
<if(eotPredictsAlt)>
    (setq alt<decisionNumber> <eotPredictsAlt>)
<else>
    <ruleBacktrackFailure()>
    (signal 'a3el-no-viable-alt (list "<description>" <decisionNumber> <stateNumber>))
<endif>
)<edges:{)}; separator="">)<\n>
>>

/** Same as a normal DFA state except that we don't examine lookahead
 *  for the bypass alternative.  It delays error detection but this
 *  is faster, smaller, and more what people expect.  For (X)? people
 *  expect "if ( LA(1)==X ) match(X);" and that's it.
 */
dfaOptionalBlockState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(LEXER)>
(setq LA<decisionNumber>_<stateNumber> (a3el-lexer-input-LA <k>))<\n>
<else>
(setq LA<decisionNumber>_<stateNumber> (a3el-parser-input-LA <k>))<\n>
<endif>
<edges; separator="\n  "><edges:{)}; separator="">
>>

/** A DFA state that is actually the loopback decision of a closure
 *  loop.  If end-of-token (EOT) predicts any of the targets then it
 *  should act like a default clause (i.e., no error can be generated).
 *  This is used only in the lexer so that for ('a')* on the end of a rule
 *  anything other than 'a' predicts exiting.
 */
dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(LEXER)>
(setq LA<decisionNumber>_<stateNumber> (a3el-lexer-input-LA <k>))<\n>
<else>
(setq LA<decisionNumber>_<stateNumber> (a3el-parser-input-LA <k>))<\n>
<endif>
<edges; separator="\n  ">
<if(eotPredictsAlt)>
<if(!edges)>
(setq alt<decisionNumber> <eotPredictsAlt>) <! if no edges, don't gen ELSE !>
<else>
  (setq alt<decisionNumber> <eotPredictsAlt>)<edges:{)}; separator=""><\n>
<\n>
<endif>
<else>
<edges:{)}; separator=""><\n>
<endif>
>>

/** An accept state indicates a unique alternative has been predicted */
dfaAcceptState(alt) ::= "(setq alt<decisionNumber> <alt>)"

/** A simple edge with an expression.  If the expression is satisfied,
 *  enter to the target state.  To handle gated productions, we may
 *  have to evaluate some predicates for this edge.
 */
dfaEdge(labelExpr, targetState, predicates) ::= <<
(if (and <labelExpr> <if(predicates)><predicates><endif>)
  (progn <targetState>)
>>

// F i x e d  D F A  (switch case)


/** A DFA state where a SWITCH may be generated.  The code generator
 *  decides if this is possible: CodeGenerator.canGenerateSwitch().
 */
dfaStateSwitch(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(LEXER)>
(a3el-alt-case (a3el-lexer-input-LA <k>)
<else>
(a3el-alt-case (a3el-parser-input-LA <k>)
<endif>
<edges; separator="\n">
(otherwise
<if(eotPredictsAlt)>
    (setq alt<decisionNumber> <eotPredictsAlt>)
<else>
    <ruleBacktrackFailure()>
    (signal 'a3el-no-viable-alt (list "<description>" <decisionNumber> <stateNumber>))
<endif>)
)<\n>
>>

dfaOptionalBlockStateSwitch(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(LEXER)>
(a3el-alt-case (a3el-lexer-input-LA <k>)
<else>
(a3el-alt-case (a3el-parser-input-LA <k>)
<endif>
    <edges; separator="\n">
)<\n>
>>

dfaLoopbackStateSwitch(k, edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(LEXER)>
(a3el-alt-case (a3el-lexer-input-LA <k>)
<else>
(a3el-alt-case (a3el-parser-input-LA <k>)
<endif>
<edges; separator="\n"><\n>
<if(eotPredictsAlt)>
(otherwise
    (setq alt<decisionNumber> <eotPredictsAlt>))<\n>
<endif>)<\n>
>>

dfaEdgeSwitch(labels, targetState) ::= <<
<labels:{(<it> <targetState>)}; separator="\n">
>>

// C y c l i c  D F A

/** The code to initiate execution of a cyclic DFA; this is used
 *  in the rule to predict an alt just like the fixed DFA case.
 *  The <name> attribute is inherited via the parser, lexer, ...
 */
dfaDecision(decisionNumber,description) ::= <<
(setq alt<decisionNumber> (a3el-predictDFA dfa<decisionNumber>))
>>

/* Dump DFA tables as run-length-encoded Strings of octal values.
 * Can't use hex as compiler translates them before compilation.
 * These strings are split into multiple, concatenated strings.
 * Java puts them back together at compile time thankfully.
 * Java cannot handle large static arrays, so we're stuck with this
 * encode/decode approach.  See analysis and runtime DFA for
 * the encoding methods.
 */

cyclicDFA(dfa) ::= <<

(a3el-defDFA DFA<dfa.decisionNumber>_eot [<dfa.eot; wrap="\n", separator=" ", null="-1">])
(a3el-defDFA DFA<dfa.decisionNumber>_eof [<dfa.eof; wrap="\n", separator=" ", null="-1">])
(a3el-defDFA DFA<dfa.decisionNumber>_min [<dfa.min; wrap="\n", separator=" ", null="-1">])
(a3el-defDFA DFA<dfa.decisionNumber>_max [<dfa.max; wrap="\n", separator=" ", null="-1">])
(a3el-defDFA DFA<dfa.decisionNumber>_accept [<dfa.accept; wrap="\n", separator=" ", null="-1">])
(a3el-defDFA DFA<dfa.decisionNumber>_special [<dfa.special; wrap="\n", separator=" ", null="-1">])
(a3el-defDFA DFA<dfa.decisionNumber>_transition [
        <dfa.transition:{s | [<s; wrap="\n     ", separator=" ", null="-1">]}; separator=" \n", null="">
    ])

(a3el-defDFAstruct DFA<dfa.decisionNumber>
  :decision-number <dfa.decisionNumber>
  :eot (a3el-getDFA DFA<dfa.decisionNumber>_eot)
  :eof (a3el-getDFA DFA<dfa.decisionNumber>_eof)
  :min (a3el-getDFA DFA<dfa.decisionNumber>_min)
  :max (a3el-getDFA DFA<dfa.decisionNumber>_max)
  :accept (a3el-getDFA DFA<dfa.decisionNumber>_accept)
  :special (a3el-getDFA DFA<dfa.decisionNumber>_special)
  :transition (a3el-getDFA DFA<dfa.decisionNumber>_transition)
  :description "<dfa.description>"
  <@errorMethod()>
<if(dfa.specialStateSTs)>
  :special-state-transition #'(lambda (s) 
     (let ((s-original s))
        (a3el-alt-case s
        <dfa.specialStateSTs:{state |
        (<i0> <! compressed special state numbers 0..n-1 !>
            <state>) }; separator="\n">
        )
<if(backtracking)>
	<if(LEXER)>
        (when (> (a3el-lexer-context-backtracking context) 0)
          (setf (a3el-lexer-context-failed context) t)
          (throw 'return -1))<\n>
	<else>
        (when (> (a3el-parser-context-backtracking context) 0)
          (setf (a3el-parser-context-failed context) t)
          (throw 'return -1))<\n>
	<endif>
<endif>
	)
    (signal 'a3el-no-viable-alt (list "<dfa.description>" <dfa.decisionNumber> s-original))
    )
<endif>
)
>>

/** A state in a cyclic DFA; it's a special state and part of a big switch on
 *  state.
 */
cyclicDFAState(decisionNumber,stateNumber,edges,needErrorClause,semPredState) ::= <<
  <if(LEXER)>
  (let ((LA<decisionNumber>_<stateNumber> (a3el-lexer-input-LA 1))
         (index<decisionNumber>_<stateNumber> -1))<\n>
  <else>
  (let ((LA<decisionNumber>_<stateNumber> (a3el-parser-input-LA 1))
         (index<decisionNumber>_<stateNumber> -1))<\n>
  <endif>

  
  <if(semPredState)> <! get next lookahead symbol to test edges, then rewind !>
    <if(LEXER)>
    (setq index<decisionNumber>_<stateNumber>  (a3el-lexer-context-pos context))
    (a3el-lexer-input-rewind)<\n>
    <else>
    (setq index<decisionNumber>_<stateNumber>  (a3el-parser-context-pos context))
    (a3el-parser-input-rewind)<\n>
    <endif>
  <endif>
  
  (setq s  -1)
  (cond 
  <edges; separator="\n ">
  )
  
  <if(semPredState)> <! return input cursor to state before we rewound !>
    <if(LEXER)>
    (a3el-lexer-input-seek index<decisionNumber>_<stateNumber>)
    <else>
    (a3el-parser-input-seek index<decisionNumber>_<stateNumber>)
    <endif>
  <endif>
  
  (when (>= s 0)
    (throw 'return s))
  )
>>

/** Just like a fixed DFA edge, test the lookahead and indicate what
 *  state to jump to next if successful.
 */
cyclicDFAEdge(labelExpr, targetStateNumber, edgeNumber, predicates) ::= <<
((and <labelExpr> <if(predicates)> <predicates> <endif>) (setq s <targetStateNumber>))
>>

/** An edge pointing at end-of-token; essentially matches any char;
 *  always jump to the target.
 */
eotDFAEdge(targetStateNumber,edgeNumber, predicates) ::= <<
(t (setq s <targetStateNumber>))
>>


// D F A  E X P R E S S I O N S

andPredicates(left,right) ::= "(and <left> <right>)"

orPredicates(operands) ::= "(or <first(operands)><rest(operands):{o | <o>}>)"

notPredicate(pred) ::= "(not <evalPredicate(...)>)"

evalPredicate(pred,description) ::= "<pred>"

evalSynPredicate(pred,description) ::= <<
  <if(!PARSER)>
  (a3el-lexer-call-synpred <pred>_fragment)
  <else>
  (a3el-parser-call-synpred <pred>_fragment)
  <endif>
>>

lookaheadTest(atom,k,atomAsInt) ::= "(equal LA<decisionNumber>_<stateNumber> <atom>)"

/** Sometimes a lookahead test cannot assume that LA(k) is in a temp variable
 *  somewhere.  Must ask for the lookahead directly.
 */
isolatedLookaheadTest(atom,k,atomAsInt) ::= <<
   <if(LEXER)>
   (equal (a3el-lexer-input-LA <k>) <atom>)
   <else>
   (equal (a3el-parser-input-LA <k>) <atom>)
   <endif>
>>

lookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= <<
(and (\>= LA<decisionNumber>_<stateNumber> <lower>) (\<= LA<decisionNumber>_<stateNumber> <upper>))
>>

isolatedLookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= <<
   <if(LEXER)>
  (and (\>= (a3el-lexer-input-LA <k>) <lower>) (\<= (a3el-lexer-input-LA <k>) <upper>))
  <else>
  (and (\>= (a3el-parser-input-LA <k>) <lower>) (\<= (a3el-parser-input-LA <k>) <upper>))
  <endif>
>>




setTest(ranges) ::= "(or <ranges; separator=\" \">)"

// A T T R I B U T E S

globalAttributeScope(scope) ::= <<
<if(scope.attributes)>
protected static class <scope.name>_scope {
    <scope.attributes:{<it.decl>;}; separator="\n">
}
protected Stack <scope.name>_stack = new Stack();<\n>
<endif>
>>

ruleAttributeScope(scope) ::= <<
<if(scope.attributes)>
protected static class <scope.name>_scope {
    <scope.attributes:{<it.decl>;}; separator="\n">
}
protected Stack <scope.name>_stack = new Stack();<\n>
<endif>
>>

returnType() ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
<ruleDescriptor.name>_return
<else>
<if(ruleDescriptor.hasSingleReturnValue)>
<ruleDescriptor.singleValueReturnType>
<else>
void
<endif>
<endif>
>>

/** Generate the Java type associated with a single or multiple return
 *  values.
 */
ruleLabelType(referencedRule) ::= <<
<if(referencedRule.hasMultipleReturnValues)>
<referencedRule.name>_return
<else>
<if(referencedRule.hasSingleReturnValue)>
<referencedRule.singleValueReturnType>
<else>
void
<endif>
<endif>
>>

/** Using a type to init value map, try to init a type; if not in table
 *  must be an object, default value is "null".
 */
initValue(typeName) ::= <<
<javaTypeInitMap.(typeName)>
>>

/** Define a rule label including default value */
ruleLabelDef(label) ::= <<
<ruleLabelType(referencedRule=label.referencedRule)> <label.label.text> = <initValue(typeName=ruleLabelType(referencedRule=label.referencedRule))>;<\n>
>>

/** Define a return struct for a rule if the code needs to access its
 *  start/stop tokens, tree stuff, attributes, ...  Leave a hole for
 *  subgroups to stick in members.
 */
returnScope(scope) ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
public static class <returnType()> extends <if(TREE_PARSER)>Tree<else>Parser<endif>RuleReturnScope {
    <scope.attributes:{public <it.decl>;}; separator="\n">
    <@ruleReturnMembers()>
};
<endif>
>>

parameterScope(scope) ::= <<
<scope.attributes:{<it.decl>}; separator=", ">
>>

parameterAttributeRef(attr) ::= "<attr.name>"
parameterSetAttributeRef(attr,expr) ::= "<attr.name> =<expr>;"

scopeAttributeRef(scope,attr,index,negIndex) ::= <<
<if(negIndex)>
((<scope>_scope)<scope>_stack.elementAt(<scope>_stack.size()-<negIndex>-1)).<attr.name>
<else>
<if(index)>
((<scope>_scope)<scope>_stack.elementAt(<index>)).<attr.name>
<else>
((<scope>_scope)<scope>_stack.peek()).<attr.name>
<endif>
<endif>
>>

scopeSetAttributeRef(scope,attr,expr,index,negIndex) ::= <<
<if(negIndex)>
((<scope>_scope)<scope>_stack.elementAt(<scope>_stack.size()-<negIndex>-1)).<attr.name> =<expr>;
<else>
<if(index)>
((<scope>_scope)<scope>_stack.elementAt(<index>)).<attr.name> =<expr>;
<else>
((<scope>_scope)<scope>_stack.peek()).<attr.name> =<expr>;
<endif>
<endif>
>>

/** $x is either global scope or x is rule with dynamic scope; refers
 *  to stack itself not top of stack.  This is useful for predicates
 *  like {$function.size()>0 && $function::name.equals("foo")}?
 */
isolatedDynamicScopeRef(scope) ::= "<scope>_stack"

/** reference an attribute of rule; might only have single return value */
ruleLabelRef(referencedRule,scope,attr) ::= <<
<if(referencedRule.hasMultipleReturnValues)>
<scope>.<attr.name>
<else>
<scope>
<endif>
>>

returnAttributeRef(ruleDescriptor,attr) ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
retval.<attr.name>
<else>
<attr.name>
<endif>
>>

returnSetAttributeRef(ruleDescriptor,attr,expr) ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
retval.<attr.name> =<expr>;
<else>
<attr.name> =<expr>;
<endif>
>>

/** How to translate $tokenLabel */
tokenLabelRef(label) ::= "<label>"

/** ids+=ID {$ids} or e+=expr {$e} */
listLabelRef(label) ::= "list_<label>"


// not sure the next are the right approach

tokenLabelPropertyRef_text(scope,attr) ::= "<scope>.getText()"
tokenLabelPropertyRef_type(scope,attr) ::= "<scope>.getType()"
tokenLabelPropertyRef_line(scope,attr) ::= "<scope>.getLine()"
tokenLabelPropertyRef_pos(scope,attr) ::= "<scope>.getCharPositionInLine()"
tokenLabelPropertyRef_channel(scope,attr) ::= "<scope>.getChannel()"
tokenLabelPropertyRef_index(scope,attr) ::= "<scope>.getTokenIndex()"
tokenLabelPropertyRef_tree(scope,attr) ::= "<scope>_tree"

ruleLabelPropertyRef_start(scope,attr) ::= "((<labelType>)<scope>.start)"
ruleLabelPropertyRef_stop(scope,attr) ::= "((<labelType>)<scope>.stop)"
ruleLabelPropertyRef_tree(scope,attr) ::= "((<ASTLabelType>)<scope>.tree)"
ruleLabelPropertyRef_text(scope,attr) ::= <<
<if(TREE_PARSER)>
input.getTokenStream().toString(
  input.getTreeAdaptor().getTokenStartIndex(<scope>.start),
  input.getTreeAdaptor().getTokenStopIndex(<scope>.start))
<else>
input.toString(<scope>.start,<scope>.stop)
<endif>
>>

ruleLabelPropertyRef_st(scope,attr) ::= "<scope>.st"

/** Isolated $RULE ref ok in lexer as it's a Token */
lexerRuleLabel(label) ::= "<label>"

lexerRuleLabelPropertyRef_type(scope,attr) ::= "<scope>.getType()"
lexerRuleLabelPropertyRef_line(scope,attr) ::= "<scope>.getLine()"
lexerRuleLabelPropertyRef_pos(scope,attr) ::= "<scope>.getCharPositionInLine()"
lexerRuleLabelPropertyRef_channel(scope,attr) ::= "<scope>.getChannel()"
lexerRuleLabelPropertyRef_index(scope,attr) ::= "<scope>.getTokenIndex()"
lexerRuleLabelPropertyRef_text(scope,attr) ::= "<scope>.getText()"

// Somebody may ref $template or $tree or $stop within a rule:
rulePropertyRef_start(scope,attr) ::= "((<labelType>)retval.start)"
rulePropertyRef_stop(scope,attr) ::= "((<labelType>)retval.stop)"
rulePropertyRef_tree(scope,attr) ::= "((<ASTLabelType>)retval.tree)"
rulePropertyRef_text(scope,attr) ::= <<
<if(TREE_PARSER)>
input.getTokenStream().toString(
  input.getTreeAdaptor().getTokenStartIndex(retval.start),
  input.getTreeAdaptor().getTokenStopIndex(retval.start))
<else>
input.toString(retval.start,input.LT(-1))
<endif>
>>
rulePropertyRef_st(scope,attr) ::= "retval.st"

lexerRulePropertyRef_text(scope,attr) ::= "getText()"
lexerRulePropertyRef_type(scope,attr) ::= "_type"
lexerRulePropertyRef_line(scope,attr) ::= "tokenStartLine"
lexerRulePropertyRef_pos(scope,attr) ::= "tokenStartCharPositionInLine"
lexerRulePropertyRef_index(scope,attr) ::= "-1" // undefined token index in lexer
lexerRulePropertyRef_channel(scope,attr) ::= "channel"
lexerRulePropertyRef_start(scope,attr) ::= "tokenStartCharIndex"
lexerRulePropertyRef_stop(scope,attr) ::= "(getCharIndex()-1)"

// setting $st and $tree is allowed in local rule. everything else
// is flagged as error
ruleSetPropertyRef_tree(scope,attr,expr) ::= "retval.tree =<expr>;"
ruleSetPropertyRef_st(scope,attr,expr) ::= "retval.st =<expr>;"


/** How to execute an action */
execAction(action) ::= <<
<if(backtracking)>
<if(actions.(actionScope).synpredgate)>
(when (<actions.(actionScope).synpredgate>)
  <action>)
<else>

<if(LEXER)>
(when (= (a3el-lexer-context-backtracking context) 0)
  <action>)
<else>
(when (= (a3el-parser-context-backtracking context) 0)
  <action>)
<endif>

<endif>
<else>
<action>
<endif>
>>

// M I S C (properties, etc...)

bitset(name, words64) ::= <<
(a3el-parser-bitset <name> (vconcat (list <words64:{(read (concat "#X" (substring "<it>" 2)))};separator=" ">)))<\n>
>>

codeFileExtension() ::= ".el"

true() ::= "t"
false() ::= "nil"


