/*
 [The "BSD licence"]
 Copyright (c) 2005-2006 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
group AST;

@outputFile.imports() ::= <<
<@super.imports()>
<if(!TREE_PARSER)><! tree parser would already have imported !>
<endif>
>>

@genericParser.members() ::= <<
<@super.members()>
<parserMembers()>
>>

/** Add an adaptor property that knows how to build trees */
parserMembers() ::= <<
>>


/** Add a variable to track rule's return AST */
ruleDeclarations() ::= <<
<super.ruleDeclarations()>
(root_0 nil)<\n>
>>


ruleLabelDefs() ::= <<
<super.ruleLabelDefs()>
<ruleDescriptor.tokenLabels:{(<it.label.text>_tree nil)}; separator="\n">
<ruleDescriptor.tokenListLabels:{<it.label.text>_tree nil)}; separator="\n">
<ruleDescriptor.allTokenRefsInAltsWithRewrites
    :{(stream_<it> (make-a3el-rewrite-token-stream :adaptor adaptor :element-description "token <it>")) }; separator="\n">
<ruleDescriptor.allRuleRefsInAltsWithRewrites
    :{(stream_<it> (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "rule <it>")) }; separator="\n">
>>


/** When doing auto AST construction, we must define some variables;
 *  These should be turned off if doing rewrites.  This must be a "mode"
 *  as a rule could have both rewrite and AST within the same alternative
 *  block.
 */
@alt.declarations() ::= <<
<if(autoAST)>
<if(outerAlt)>
(setq root_0 (funcall adaptor-new-nil))<\n>
<endif>
<endif>
>>


// T r a c k i n g  R u l e  E l e m e n t s

/** ID and track it for use in a rewrite rule */
tokenRefTrack(token,label,elementIndex,hetero) ::= <<
<tokenRefBang(...)> <! Track implies no auto AST construction!>
<if(backtracking)>(if <actions.(actionScope).synpredgate> <endif>
   (a3el-rewrite-stream-add stream_<token> <label>)<\n>
<if(backtracking)>)<endif>
>>

/** ids+=ID and track it for use in a rewrite rule; adds to ids *and*
 *  to the tracking list stream_ID for use in the rewrite.
 */
tokenRefTrackAndListLabel(token,label,elementIndex,hetero) ::= <<
<tokenRefTrack(...)>
<listLabel(elem=label,...)>
>>

/** ^(ID ...) track for rewrite */
tokenRefRuleRootTrack(token,label,elementIndex,hetero) ::= <<
<tokenRefBang(...)>
<if(backtracking)>(if <actions.(actionScope).synpredgate> <endif>
   (a3el-rewrite-stream-add stream_<token> <label>)<\n>
<if(backtracking)>)<endif>
>>

/** Match ^(label+=TOKEN ...) track for rewrite */
tokenRefRuleRootTrackAndListLabel(token,label,elementIndex,hetero) ::= <<
<tokenRefRuleRootTrack(...)>
<listLabel(elem=label,...)>
>>

/** rule when output=AST and tracking for rewrite */
ruleRefTrack(rule,label,elementIndex,args,scope) ::= <<
<super.ruleRef(...)>
<if(backtracking)>(if <actions.(actionScope).synpredgate> <endif>
   (a3el-rewrite-stream-add stream_<rule.name> (a3el-retval-tree <label>))<\n>
<if(backtracking)>)<endif>
>>

/** x+=rule when output=AST and tracking for rewrite */
ruleRefTrackAndListLabel(rule,label,elementIndex,args,scope) ::= <<
<ruleRefTrack(...)>
<listLabel(elem="(a3el-retval-tree <label>)",...)>
>>

/** ^(rule ...) rewrite */
ruleRefRuleRootTrack(rule,label,elementIndex,args,scope) ::= <<
<ruleRefRuleRoot(...)>
<if(backtracking)>(if <actions.(actionScope).synpredgate> <endif>
   (a3el-rewrite-stream-add stream_<rule> (a3el-retval-tree <label>))<\n>
<if(backtracking)>)<endif>
>>

/** ^(x+=rule ...) rewrite */
ruleRefRuleRootTrackAndListLabel(rule,label,elementIndex,args,scope) ::= <<
<ruleRefRuleRootTrack(...)>
<listLabel(elem=label+".getTree()",...)>
>>

// R e w r i t e

rewriteCode(
	alts, description,
	referencedElementsDeep, // ALL referenced elements to right of ->
	referencedTokenLabels,
	referencedTokenListLabels,
	referencedRuleLabels,
	referencedRuleListLabels,
	referencedWildcardLabels,
	referencedWildcardListLabels,
	rewriteBlockLevel, enclosingTreeLevel, treeLevel) ::=
<<

// AST REWRITE
// elements: <referencedElementsDeep; separator=", ">
// token labels: <referencedTokenLabels; separator=", ">
// rule labels: <referencedRuleLabels; separator=", ">
// token list labels: <referencedTokenListLabels; separator=", ">
// rule list labels: <referencedRuleListLabels; separator=", ">
// wildcard labels: <[referencedWildcardLabels,referencedWildcardListLabels]; separator=", ">
<if(backtracking)>
(if <actions.(actionScope).synpredgate> <\n>
<endif>
(setf (a3el-retval-tree <prevRuleRootRef()>) root_0)
<rewriteCodeLabels()>
(setq root_0 (funcall adaptor-new-nil))
<alts:rewriteAlt(); separator="else ">
<! if tree parser and rewrite=true !>
<if(TREE_PARSER)>
<if(rewriteMode)>
(setf (a3el-retval-tree <prevRuleRootRef()>) (funcall adaptor-rule-post-processing root_0))
;; FIXME
;;input.replaceChildren(adaptor.getParent(retval.start),
;;                      adaptor.getChildIndex(retval.start),
;;                      adaptor.getChildIndex(_last),
;;                      retval.tree);
<endif>
<endif>
<! if parser or tree-parser && rewrite!=true, we need to set result !>
<if(!TREE_PARSER)>
(setf (a3el-retval-tree <prevRuleRootRef()>) root_0)A
<else>
<if(!rewriteMode)>
(setf (a3el-retval-tree <prevRuleRootRef()>) root_0)A
<endif>
<endif>
<if(backtracking)>
)
<endif>
>>

rewriteCodeLabels() ::= <<
<referencedTokenLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-token-stream :adaptor adaptor :element-description "token <it>")))
                     (a3el-rewrite-stream-add s <it>)))
      };
    separator="\n"
>
<referencedTokenListLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-token-stream :adaptor adaptor :element-description "token <it>")))
                     (setf (a3el-rewrite-stream-elements s) list_<it>)))
      };
    separator="\n"
>

<referencedWildcardLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "wildcard <it>")))
       	     	     (a3el-rewrite-stream-add s <it>)))
      };
    separator="\n"
>
<referencedWildcardListLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "wildcard <it>")))
                     (setf (a3el-rewrite-stream-elements s) list_<it>)))
      };
    separator="\n"
>
<referencedRuleLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "rule <it>")))
                     (a3el-rewrite-stream-add s (if (null <it>) nil (a3el-retval-tree <it>)))))
      };
    separator="\n"
>
<referencedRuleListLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "token <it>")))
                     (setf (a3el-rewrite-stream-elements s) list_<it>)))
      };
    separator="\n"
>

>>

/** Generate code for an optional rewrite block; note it uses the deep ref'd element
  *  list rather shallow like other blocks.
  */
rewriteOptionalBlock(
	alt,rewriteBlockLevel,
	referencedElementsDeep, // all nested refs
	referencedElements, // elements in immediately block; no nested blocks
	description) ::=
<<
 ;;<fileName>:<description>
(if (or <referencedElementsDeep:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" "> )
    <alt>)
<referencedElementsDeep:{el | (a3el-rewrite-stream-reset stream_<el>)<\n>}>
>>

rewriteClosureBlock(
	alt,rewriteBlockLevel,
	referencedElementsDeep, // all nested refs
	referencedElements, // elements in immediately block; no nested blocks
	description) ::=
<<
;;<fileName>:<description>
(while (or <referencedElements:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" "> )
    <alt>)
<referencedElements:{el | (a3el-rewrite-stream-reset stream_<el>) <\n>}>
>>

rewritePositiveClosureBlock(
	alt,rewriteBlockLevel,
	referencedElementsDeep, // all nested refs
	referencedElements, // elements in immediately block; no nested blocks
	description) ::=
<<
(if (not (or <referencedElements:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" ">))
    (signal 'a3el-rewrite-early-exit-error nil)
)
(while (or <referencedElements:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" "> )
    <alt>
)
<referencedElements:{el | (a3el-rewrite-stream-reset stream_<el>) <\n>}>
>>



rewriteAlt(a) ::= <<
;; <a.description>
<if(a.pred)>
(if (<a.pred>)
    <a.alt>
    )
<else>
    <a.alt>
<endif>
>>



/** For empty rewrites: "r : ... -> ;" */
rewriteEmptyAlt() ::= "(setq root_0 nil)"

rewriteTree(root,children,description,enclosingTreeLevel,treeLevel) ::= <<
;; <fileName>:<description>
(let ((root_<treeLevel> (funcall adaptor-new-nil)))
 <root:rewriteElement()>
 <children:rewriteElement()>
 (funcall adaptor-add-child root_<enclosingTreeLevel> root_<treeLevel>)
)<\n>
>>

rewriteElementList(elements) ::= "<elements:rewriteElement()>"

rewriteElement(e) ::= <<
<@pregen()>
<e.el>
>>

/** Gen ID or ID[args] */
rewriteTokenRef(token,elementIndex,hetero,args) ::= <<
(funcall adaptor-add-child root_<treeLevel> <createRewriteNodeFromElement(...)>)<\n>
>>

/** Gen $label ... where defined via label=ID */
rewriteTokenLabelRef(label,elementIndex) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next-node stream_<label>))<\n>
>>

/** Gen $label ... where defined via label+=ID */
rewriteTokenListLabelRef(label,elementIndex) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next-node stream_<label>))<\n>
>>

/** Gen ^($label ...) */
rewriteTokenLabelRefRoot(label,elementIndex) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next-node stream_<label>) root_<treeLevel>))<\n>
>>

/** Gen ^($label ...) where label+=... */
rewriteTokenListLabelRefRoot ::= rewriteTokenLabelRefRoot

/** Gen ^(ID ...) or ^(ID[args] ...) */
rewriteTokenRefRoot(token,elementIndex,hetero,args) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (<createRewriteNodeFromElement(...)> root_<treeLevel>)))<\n>
>>

rewriteImaginaryTokenRef(args,token,hetero,elementIndex) ::= <<
(funcall adaptor-add-child root_<treeLevel> <createImaginaryNode(tokenType=token, ...)>)<\n>
>>

rewriteImaginaryTokenRefRoot(args,token,hetero,elementIndex) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root <createImaginaryNode(tokenType=token, ...)> root_<treeLevel>))<\n>
>>

/** plain -> {foo} action */
rewriteAction(action) ::= <<
(setq root_0 <action>)<\n>
>>

/** What is the name of the previous value of this rule's root tree?  This
 *  let's us refer to $rule to mean previous value.  I am reusing the
 *  variable 'tree' sitting in retval struct to hold the value of root_0 right
 *  before I set it during rewrites.  The assign will be to retval.tree.
 */
prevRuleRootRef() ::= "retval"

rewriteRuleRef(rule) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next-tree stream_<rule>))<\n>
>>

rewriteRuleRefRoot(rule) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next-node stream_<rule>) root_<treeLevel>)<\n>
>>

rewriteNodeAction(action) ::= <<
(funcall adaptor-add-child root_<treeLevel> <action>)<\n>
>>

rewriteNodeActionRoot(action) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root <action> root_<treeLevel>))<\n>
>>

/** Gen $ruleLabel ... where defined via ruleLabel=rule */
rewriteRuleLabelRef(label) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next-tree stream_<label>))<\n>
>>

/** Gen $ruleLabel ... where defined via ruleLabel+=rule */
rewriteRuleListLabelRef(label) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next-tree stream_<label>))<\n>
>>

/** Gen ^($ruleLabel ...) where ruleLabel=rule */
rewriteRuleLabelRefRoot(label) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next-node stream_<label>)) root_<treeLevel>)<\n>
>>

/** Gen ^($ruleLabel ...) where ruleLabel+=rule */
rewriteRuleListLabelRefRoot(label) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next-node stream_<label>)) root_<treeLevel>)<\n>
>>

rewriteWildcardLabelRef(label) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next-tree stream_<label>))<\n>
>>


createImaginaryNode(tokenType,hetero,args) ::= <<
<if(hetero)>
<! new MethodNode(IDLabel, args) !>
;; FIXME create hetero
;; new <hetero>(<tokenType><if(args)> <args; separator=", "><endif>)
<else>
(funcall adaptor-create <tokenType> <args; separator=" "><if(!args)>"<tokenType>"<endif>)
<endif>
>>

createRewriteNodeFromElement(token,hetero,args) ::= <<
<if(hetero)>
;; FIXME create hetero
;; new <hetero>(stream_<token>.nextToken()<if(args)> <args; separator=", "><endif>)
<else>
<if(args)> <! must create new node from old !>
(funcall adaptor-create <token> <args; separator=" ">)
<else>
(a3el-rewrite-stream-next-node stream_<token>)
<endif>
<endif>
>>