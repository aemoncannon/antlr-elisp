/*
 [The "BSD licence"]
 Copyright (c) 2005-2006 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

group AST;

@outputFile.imports() ::= <<
<@super.imports()>
>>

@genericParser.members() ::= <<
<@super.members()>
<parserMembers()>
>>

/** Add an adaptor property that knows how to build trees */
parserMembers() ::= <<
;; We don't need this.
>>


/** Add a variable to track rule's return AST */
ruleDeclarations() ::= <<
<super.ruleDeclarations()>
(root_0 nil)<\n>
>>

ruleLabelDefs() ::= <<
<super.ruleLabelDefs()>
<ruleDescriptor.tokenLabels:{(<it.label.text>_tree nil)}; separator="\n">
<ruleDescriptor.tokenListLabels:{<it.label.text>_tree nil)}; separator="\n">
<ruleDescriptor.allTokenRefsInAltsWithRewrites
    :{(stream_<it> (make-a3el-rewrite-token-stream :adaptor adaptor :element-description "token <it>")) }; separator="\n">
<ruleDescriptor.allRuleRefsInAltsWithRewrites
    :{(stream_<it> (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "rule <it>")) }; separator="\n">
>>

ruleCleanUp() ::= <<
<super.ruleCleanUp()>
<if(ruleDescriptor.hasMultipleReturnValues)>
<if(backtracking)>
(if (= (a3el-parser-context-backtracking context) 0)<\n>
<endif>
(setf (a3el-retval-tree retval) (funcall adaptor-rule-post-processing root_0))
(funcall adaptor-set-token-boundaries (a3el-retval-tree retval) (a3el-retval-start retval) (a3el-retval-stop retval))
<if(backtracking)>
)
<endif>
<endif>
>>

/** When doing auto AST construction, we must define some variables;
 *  These should be turned off if doing rewrites.  This must be a "mode"
 *  as a rule could have both rewrite and AST within the same alternative
 *  block.
 */
@alt.declarations() ::= <<
<if(autoAST)>
<if(outerAlt)>
(setq root_0 (funcall adaptor-new-nil))<\n>
<endif>
<endif>
>>

// TOKEN AST STUFF

/** ID and output=AST */
tokenRef(token,label,elementIndex) ::= <<
<super.tokenRef(...)>
<if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0)<endif>
(progn
(setq <label>_tree (funcall adaptor-create1 <label>))
(funcall adaptor-add-child root_0 <label>_tree))
<if(backtracking)>)<endif>
>>

/** ID! and output=AST (same as plain tokenRef) */
tokenRefBang(token,label,elementIndex) ::= "<super.tokenRef(...)>"

/** ID^ and output=AST */
tokenRefRuleRoot(token,label,elementIndex) ::= <<
<super.tokenRef(...)>
<if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0)<endif>
(progn
(setq <label>_tree (funcall adaptor-create1 <label>))
(setq root_0 (funcall adaptor-become-root <label>_tree root_0)))
<if(backtracking)>)<endif>
>>

/** ids+=ID! and output=AST */
tokenRefBangAndListLabel(token,label,elementIndex) ::= <<
<tokenRefBang(...)>
<listLabel(elem=label,...)>
>>

/** label+=TOKEN when output=AST but not rewrite alt */
tokenRefAndListLabel(token,label,elementIndex) ::= <<
<tokenRef(...)>
<listLabel(elem=label,...)>
>>

/** Match label+=TOKEN^ when output=AST but not rewrite alt */
tokenRefRuleRootAndListLabel(token,label,elementIndex) ::= <<
<tokenRefRuleRoot(...)>
<listLabel(elem=label,...)>
>>

/** ID but track it for use in a rewrite rule */
tokenRefTrack(token,label,elementIndex) ::= <<
 <super.tokenRef(...)>
 <if(backtracking)>
 (if (= (a3el-parser-context-backtracking context) 0) 
 <endif>
 (a3el-rewrite-stream-add stream_<token> <label>)<\n>
  <if(backtracking)>
  )
  <endif>
>>

/** ids+=ID and track it for use in a rewrite rule; adds to ids *and*
 *  to the tracking list stream_ID for use in the rewrite.
 */
tokenRefTrackAndListLabel(token,label,elementIndex) ::= <<
<tokenRefTrack(...)>
<listLabel(elem=label,...)>
>>

// SET AST

// the match set stuff is interesting in that it uses an argument list
// to pass code to the default matchSet; another possible way to alter
// inherited code.  I don't use the region stuff because I need to pass
// different chunks depending on the operator.  I don't like making
// the template name have the operator as the number of templates gets
// large but this is the most flexible--this is as opposed to having
// the code generator call matchSet then add root code or ruleroot code
// plus list label plus ...  The combinations might require complicated
// rather than just added on code.  Investigate that refactoring when
// I have more time.

matchSet(s,label,elementIndex,postmatchCode) ::= <<
<super.matchSet(..., postmatchCode={
		     <if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0) <endif>
		     (funcall adaptor-add-child root_0 (funcall adaptor-create1 <label>))
		     <if(backtracking)>)<endif>
})>
>>

matchSetBang(s,label,elementIndex,postmatchCode) ::= "<super.matchSet(...)>"

// note there is no matchSetTrack because -> rewrites force sets to be
// plain old blocks of alts: (A|B|...|C)

matchSetRuleRoot(s,label,elementIndex,debug) ::= <<
<super.matchSet(..., postmatchCode={
		     <if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0) <endif>
		     (setq root_0  (funcall adaptor-become-root (funcall adaptor-create1 <label>) root_0))
		     <if(backtracking)>)<endif>
})>
>>

// RULE REF AST

/** rule when output=AST */
ruleRef(rule,label,elementIndex,args) ::= <<
<super.ruleRef(...)>
<if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0) <endif>
(funcall adaptor-add-child root_0 (a3el-retval-tree <label>))
<if(backtracking)>)<endif>
>>

/** rule! is same as normal rule ref */
ruleRefBang(rule,label,elementIndex,args) ::= "<super.ruleRef(...)>"

/** rule^ */
ruleRefRuleRoot(rule,label,elementIndex,args) ::= <<
<super.ruleRef(...)>
<if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0) <endif>
(setq root_0 (funcall adaptor-become-root (a3el-retval-tree <label>) root_0))
<if(backtracking)>)<endif>
>>

/** rule when output=AST and tracking for rewrite */
ruleRefTrack(rule,label,elementIndex,args) ::= <<
<super.ruleRef(...)>
<if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0) <endif>
(a3el-rewrite-stream-add stream_<rule> (a3el-retval-tree <label>))
<if(backtracking)>)<endif>
>>

/** x+=rule when output=AST and tracking for rewrite */
ruleRefTrackAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRefTrack(...)>
<listLabel(elem=label,...)>
>>

/** x+=rule when output=AST */
ruleRefAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRef(...)>
<listLabel(elem="(a3el-retval-tree <label>)",...)>
>>

/** x+=rule! when output=AST is a rule ref with list addition */
ruleRefBangAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRefBang(...)>
<listLabel(elem="(a3el-retval-tree <label>)",...)>
>>

/** x+=rule^ */
ruleRefRuleRootAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRefRuleRoot(...)>
<listLabel(elem="(a3el-retval-tree <label>)",...)>
>>

// WILDCARD AST

wildcard(label,elementIndex) ::= <<
<super.wildcard(...)>
<if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0) <endif>
(progn
(setq <label>_tree (funcall adaptor-create1 <label>))
(funcall adaptor-add-child root_0 <label>_tree))
<if(backtracking)>)<endif>
>>

wildcardBang(label,elementIndex) ::= "<super.wildcard(...)>"

wildcardRuleRoot(label,elementIndex) ::= <<
<super.wildcard(...)>
<if(backtracking)>(if (= (a3el-parser-context-backtracking context) 0) <endif>
(progn
(setq <label>_tree (funcall adaptor-create1 <label>))
(setq root_0 (funcall adaptor-become-root <label>_tree root_0)))
<if(backtracking)>)<endif>
>>

// TODO: ugh, am i really missing the combinations for Track and ListLabel?
// there's got to be a better way

// R e w r i t e

rewriteCode(
	alts, description,
	referencedElementsDeep, // ALL referenced elements to right of ->
	referencedTokenLabels,
	referencedTokenListLabels,
	referencedRuleLabels,
	referencedRuleListLabels,
	rewriteBlockLevel, enclosingTreeLevel, treeLevel) ::=
<<

;; AST REWRITE
;; elements: <referencedElementsDeep; separator=", ">
;; token labels: <referencedTokenLabels; separator=", ">
;; rule labels: <referencedRuleLabels; separator=", ">
;; token list labels: <referencedTokenListLabels; separator=", ">
;; rule list labels: <referencedRuleListLabels; separator=", ">

<if(backtracking)>(if (= (a3el-parser-context-backtracking 0)) <endif>

(setf (a3el-retval-tree <prevRuleRootRef()>) root_0)
<rewriteCodeLabels()>
(setq root_0 (funcall adaptor-new-nil))
<alts:rewriteAlt(); separator="else ">

<if(backtracking)>)<endif>
>>

rewriteCodeLabels() ::= <<
<referencedTokenLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-token-stream :adaptor adaptor :element-description "token <it>")))
                     (a3el-rewrite-stream-add s <it>)))
      };
    separator="\n"
>
<referencedTokenListLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-token-stream :adaptor adaptor :element-description "token <it>")))
                     (setf (a3el-rewrite-stream-elements s) list_<it>)))
      };
    separator="\n"
>
<referencedRuleLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "token <it>")))
                     (a3el-rewrite-stream-add s (if (null <it>) nil (a3el-retval-tree <it>)))))
      };
    separator="\n"
>
<referencedRuleListLabels
    :{ (setq stream_<it> (let ((s (make-a3el-rewrite-subtree-stream :adaptor adaptor :element-description "token <it>")))
                     (setf (a3el-rewrite-stream-elements s) list_<it>)))
      };
    separator="\n"
>
>>

/** Generate code for an optional rewrite block; note it uses the deep ref'd element
  *  list rather shallow like other blocks.
  */
rewriteOptionalBlock(
	alt,rewriteBlockLevel,
	referencedElementsDeep, // all nested refs
	referencedElements, // elements in immediately block; no nested blocks
	description) ::=
<<
 ;;<fileName>:<description>
(if (or <referencedElementsDeep:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" "> )
    <alt>)
<referencedElementsDeep:{el | (a3el-rewrite-stream-reset stream_<el>)<\n>}>
>>

rewriteClosureBlock(
	alt,rewriteBlockLevel,
	referencedElementsDeep, // all nested refs
	referencedElements, // elements in immediately block; no nested blocks
	description) ::=
<<
;;<fileName>:<description>
(while (or <referencedElements:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" "> )
    <alt>)
<referencedElements:{el | (a3el-rewrite-stream-reset stream_<el>) <\n>}>
>>

rewritePositiveClosureBlock(
	alt,rewriteBlockLevel,
	referencedElementsDeep, // all nested refs
	referencedElements, // elements in immediately block; no nested blocks
	description) ::=
<<
(if (not (or <referencedElements:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" ">))
    (signal 'a3el-rewrite-early-exit-error)
)
(while (or <referencedElements:{el | (a3el-rewrite-stream-has-next stream_<el>) }; separator=" "> )
    <alt>
)
<referencedElements:{el | (a3el-rewrite-stream-reset stream_<el>) <\n>}>
>>

rewriteAlt(a) ::= <<
;; <a.description>
<if(a.pred)>
(if (<a.pred>)
    <a.alt>
    )
<else>
    <a.alt>
<endif>
>>

/** For empty rewrites: "r : ... -> ;" */
rewriteEmptyAlt() ::= "(setq root_0 nil)"

rewriteTree(root,children,description,enclosingTreeLevel,treeLevel) ::= <<
;; <fileName>:<description>
(let ((root_<treeLevel> (funcall adaptor-new-nil)))
 <root:rewriteElement()>
 <children:rewriteElement()>
 (funcall adaptor-add-child root_<enclosingTreeLevel> root_<treeLevel>)
)<\n>
>>

rewriteElementList(elements) ::= "<elements:rewriteElement()>"

rewriteElement(e) ::= <<
<@pregen()>
<e.el>
>>

/** Gen ID or ID[args] */
rewriteTokenRef(token,elementIndex,args) ::= <<
(funcall adaptor-add-child root_<treeLevel> 
	 <if(args)>(funcall adaptor-create2 <token> <args; separator=" ">)
	 <else>
	 (a3el-rewrite-stream-next stream_<token>)
	 <endif>
)<\n>
>>

/** Gen $label ... where defined via label=ID */
rewriteTokenLabelRef(label,elementIndex) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next stream_<label>))<\n>
>>

/** Gen $label ... where defined via label+=ID */
rewriteTokenListLabelRef(label,elementIndex) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next stream_<label>))<\n>
>>

/** Gen ^($label ...) */
rewriteTokenLabelRefRoot(label,elementIndex) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next stream_<label>) root_<treeLevel>))<\n>
>>

/** Gen ^($label ...) where label+=... */
rewriteTokenListLabelRefRoot ::= rewriteTokenLabelRefRoot

/** Gen ^(ID ...) or ^(ID[args] ...) */
rewriteTokenRefRoot(token,elementIndex,args) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root 
      <if(args)>
      (funcall adaptor-create2 <token> <args; separator=" ">)
      <else>
      (a3el-rewrite-stream-next stream_<token>)
      <endif>
       root_<treeLevel>))
       <\n>
>>

rewriteImaginaryTokenRef(args,token,elementIndex) ::= <<
(funcall adaptor-add-child root_<treeLevel> 
	 (funcall adaptor-create2 <token> <args; separator=" "> <if(!args)>"<token>"<endif>)
	 )<\n>
>>

rewriteImaginaryTokenRefRoot(args,token,elementIndex) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root 
      (funcall adaptor-create2 <token> <args; separator=" "><if(!args)>"<token>"<endif>)
      root_<treeLevel>
      ))<\n>
>>

/** plain -> {foo} action */
rewriteAction(action) ::= <<
(setq root_0 <action>)<\n>
>>

/** What is the name of the previous value of this rule's root tree?  This
 *  let's us refer to $rule to mean previous value.  I am reusing the
 *  variable 'tree' sitting in retval struct to hold the value of root_0 right
 *  before I set it during rewrites.  The assign will be to retval.tree.
 */
prevRuleRootRef() ::= "retval"

rewriteRuleRef(rule) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next stream_<rule>))<\n>
>>

rewriteRuleRefRoot(rule) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next-node stream_<rule>) root_<treeLevel>))<\n>
>>

rewriteNodeAction(action) ::= <<
(funcall adaptor-add-child root_<treeLevel> <action>)<\n>
>>

rewriteNodeActionRoot(action) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root <action> root_<treeLevel>))<\n>
>>

/** Gen $ruleLabel ... where defined via ruleLabel=rule */
rewriteRuleLabelRef(label) ::= <<
(funcall adaptor-add-child root_<treeLevel> (a3el-rewrite-stream-next stream_<label>))<\n>
>>

/** Gen $ruleLabel ... where defined via ruleLabel+=rule */
rewriteRuleListLabelRef(label) ::= <<
;; FIXME TODO
(funcall adaptor-add-child root_<treeLevel> 
	 (a3el-retval-tree (a3el-rewrite-stream-next stream_<label>)))
>>

/** Gen ^($ruleLabel ...) where ruleLabel=rule */
rewriteRuleLabelRefRoot(label) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next-node stream_<label>) root_<treeLevel>))<\n>
>>

/** Gen ^($ruleLabel ...) where ruleLabel+=rule */
rewriteRuleListLabelRefRoot(label) ::= <<
(setq root_<treeLevel> (funcall adaptor-become-root (a3el-rewrite-stream-next-node stream_<label>) root_<treeLevel>))<\n>
>>
